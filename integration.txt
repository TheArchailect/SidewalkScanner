> 3 main textures to grab in frontend
let Some(original_gpu) = gpu_images.get(&assets.colour_class_texture) else {
        return;
    };
    let Some(position_gpu) = gpu_images.get(&assets.position_texture) else {
        return;
    };
    let Some(spatial_gpu) = gpu_images.get(&assets.spatial_index_texture) else {
        return;
    };

"position":"RGBA32F - XYZ coordinates + validity"
"colour_class":"RGBA32F - RGB colour + classification"

> must be initialized correctly
let Some(final_gpu) = gpu_images.get(&assets.final_texture) else {
        return;
    };
 
> research build scripts:
    - modify metadata to insert texture paths when compiling with WASM
    - insert the correct directory in the frontend when compiling


SidewalkScanner\point-cloud-render-engine\assets\pre_processor_data\bologna_colour_class_2048x2048.dds

fn main() {

    create new .json file through build.rs
        build.rs established manifest directory "CARGO_MANIFEST"
        build.rs establishes assets directory and COPIES ".join" to "CARGO_MANIFEST"
        build.rs copies metadata.json file to assets directory
            create assets directory if it doesn't exist
        build.rs joins metadata.json file to assets directory in dist location
    write out 
}

-Trunk config-
Trunk.toml
[[copy]] function used 

Identified "integrity" - SHA hash within node modules - possible blocker?
"node_modules/@babel/code-frame": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.27.1.tgz",
      "integrity": "sha512-cjQ7ZlQ0Mv3b47hABuTevyTuYN4i+loJKGeV9flcCgIK37cCXRh+L1bd3iBHlynerhQ7BhCkn2BPbQUL+rGqFg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-validator-identifier": "^7.27.1",
        "js-tokens": "^4.0.0",
        "picocolors": "^1.1.1"
      },

